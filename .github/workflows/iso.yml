name: ISO
on:
  workflow_dispatch:

env:
  IMAGE_NAME: "${{ github.event.repository.name }}"
  IMAGE_REGISTRY: "ghcr.io/${{ github.repository_owner }}"

jobs:
  variants:
    name: Prepare list of variants
    runs-on: ubuntu-latest
    outputs:
      variants: ${{ steps.json.outputs.variants }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Bun
        uses: oven-sh/setup-bun@v2

      - name: Load variants
        id: json
        run: |
          output=$(bun script/list-variants.ts)
          echo "variants=$output\n" >> $GITHUB_OUTPUT

  generate-iso:
    name: Generate an ISO image
    runs-on: ubuntu-latest

    needs: variants
    strategy:
      matrix:
        variant: ${{ fromJson(needs.variants.outputs.variants) }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Maximize build space
        uses: ublue-os/remove-unwanted-software@v7

      - name: Install Bun
        uses: oven-sh/setup-bun@v2

      - name: Generate tag
        id: generate-tag
        run: |
          if [[ "${{ github.ref_type }}" == "tag" ]]; then
              tag="${{ github.ref_name }}"
          else
              tag="latest"
          fi

          echo "tag=$tag\n" >> $GITHUB_OUTPUT

      - name: Get base image
        id: base-image
        run: |
          output=$(bun script/get-base-image.ts ${{ matrix.variant }})
          name=$(echo $output | jq -r ".name")
          version=$(echo $output | jq -r ".version")

          echo "name=$name\n" >> $GITHUB_OUTPUT
          echo "version=$version\n" >> $GITHUB_OUTPUT

      - name: Build ISO
        uses: jasonn3/build-container-installer@main
        id: iso-build
        env:
          IMAGE_FULL_NAME: "${{ env.IMAGE_NAME }}-${{ matrix.variant }}"
        with:
          image_name: "${{ env.IMAGE_FULL_NAME }}"
          image_repo: "${{ env.IMAGE_REGISTRY }}"
          image_tag: "${{ steps.generate-tag.outputs.tag }}"
          variant: "${{ steps.base-image.outputs.name }}"
          version: "${{ steps.base-image.outputs.version }}"
          iso_name: "${{ env.IMAGE_FULL_NAME }}.iso"

      - name: Upload ISO as artifact
        id: upload
        uses: actions/upload-artifact@v4
        with:
          name: "${{ steps.iso-build.outputs.iso_name }}"
          path: "${{ steps.iso-build.outputs.iso_path }}"
          if-no-files-found: error
          retention-days: 0
          compression-level: 0
